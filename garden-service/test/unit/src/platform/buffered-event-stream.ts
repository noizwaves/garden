/*
 * Copyright (C) 2018-2020 Garden Technologies, Inc. <info@garden.io>
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */

import { expect } from "chai"
import { BuildCommand } from "../../../../src/commands/build"
import { StreamEvent, LogEntryEvent } from "../../../../src/platform/buffered-event-stream"
import { getDataDir, makeTestGarden, withDefaultGlobalOpts } from "../../../helpers"
import { cleanupAuthTokens } from "./auth"
import { saveAuthToken } from "../../../../src/platform/auth"
import { getLogger } from "../../../../src/logger/logger"

describe("BufferedEventStream", () => {
  beforeEach(cleanupAuthTokens)
  after(cleanupAuthTokens)

  it("if the user is not logged in, BufferedEventStream should be set on Garden instance", async () => {
    // Since we cleared the auth token in the beforeEach handler, the user should not be logged in
    const garden = await makeTestGarden(getDataDir("test-project-a"), { sessionId: "dummy-session_id" })
    expect(garden["bufferedEventStream"]).to.not.exist
  })

  it("if the user is logged in, should flush events and log entries generated by a command", async () => {
    // Log the user in before creating a garden instance
    await saveAuthToken("test-token", getLogger().placeholder())

    const flushedEvents: StreamEvent[] = []
    const flushedLogEntries: LogEntryEvent[] = []

    const garden = await makeTestGarden(getDataDir("test-project-a"), { sessionId: "dummy-session_id" })
    const log = garden.log
    const footerLog = garden.log
    const command = new BuildCommand()
    const bufferedEventStream = garden["bufferedEventStream"]

    expect(bufferedEventStream).to.exist

    bufferedEventStream!.flushEventsTestHandler = (events: StreamEvent[]) => {
      flushedEvents.push(...events)
    }

    bufferedEventStream!.flushLogEntriesTestHandler = (logEntries: LogEntryEvent[]) => {
      flushedLogEntries.push(...logEntries)
    }

    await command.action({
      garden,
      log,
      headerLog: log,
      footerLog,
      args: { modules: undefined },
      opts: withDefaultGlobalOpts({ watch: false, force: true }),
    })

    expect(flushedEvents.length).to.be.greaterThan(0)
    expect(flushedLogEntries.length).to.be.greaterThan(0)
  })

})
